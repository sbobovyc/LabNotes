import csv
import datetime
import matplotlib.pyplot as plt
import matplotlib
import itertools
import numpy
import argparse
import sys


YMIN = 0
YMAX = 35000
"""
colors = ['b', 'g', 'r',
          'c', 'm', 'y',
          'k'
          ]
"""

def read_datafile(file_name, norm_time):
    time = []
    capacitance = []
    with open(file_name, 'rb') as f:
        reader = csv.reader(f)
        for row in reader:
            time.append(matplotlib.dates.datestr2num(row[0]))
            capacitance.append(row[1:])
            
    if norm_time:
        return (range(0, len(time)), capacitance)
    else:
        return (time, capacitance)

def plot_data(file_name, norm_time=True, skip_list=None):    
    data_far = read_datafile(file_name, norm_time)    
    it = itertools.izip(*data_far[1]) # get iterator to capacitance data
    channel = 0
    ploting_function = None
    if norm_time:        
        plotting_function = plt.plot
    else:
        plt.gca().xaxis.set_major_formatter(matplotlib.dates.DateFormatter("%H:%M:%S.%f"))
        plotting_function = plt.plot_date

    color_list = []
    name = ["1+2","1-3","1-4","2+3","2-4","3+4","LED"];
    colors = ['b', 'g', 'r',
          'c', 'm', 'y',
          'k', '0.75']
    for i in it:
        if skip_list == None or not channel in skip_list:
            # select color that is different enough from already used colors
            while True:
                color = numpy.random.rand(3,1)
                for col in color_list:
                    diff = numpy.linalg.norm(col-color)
                    if diff < 100:
                        break
                break            
            color_list.append(color)
            plotting_function(data_far[0], i, color=colors[channel], linestyle="-", marker=".",
                              label=" "+ name[channel])
        channel += 1
    
            
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Tool that can read CSV files generated by VSP experiments.')
    parser.add_argument('files', nargs='+', help='Input file(s)')
    parser.add_argument('-t', '--time', default=False, action='store_true', help='Plot time instead of measurement number')
    parser.add_argument('-s', '--skip', nargs='+', default=None, type=int, help='Don\'t plot these channels')    
    parser.add_argument('-l', '--limit', default=False, action='store_true', help='Limit y scale from %i to %i' % (YMIN, YMAX))
    parser.add_argument('--title', default="", help='Title for the plot')
    args = parser.parse_args()
    if args.files == None:
        parser.print_help()
        sys.exit()

    for f in args.files:
        plot_data(f, not args.time, args.skip)

    plt.ylim([30000, YMAX])

    plt.draw()
    plt.ylabel('CDC output')
    if not args.time:
        plt.xlim([0, 250])
    if args.limit:
        plt.ylim([YMIN, YMAX])
    plt.axhline(32768)
    plt.legend( loc='upper right' )
    plt.grid(which='both')
    plt.title(args.title)
    plt.show()    
